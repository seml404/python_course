# SET / FROZENSET

# суть - те же списки, но с уникальными элементами и в случайном порядке

# ГЛАВНОЕ
# списки, состоящие из уникальных элементов
# в случайном порядке элементы

# ИСПОЛЬЗОВАНИЕ

# удаление повторяющиеся элементов из имеющегося списка путем его преобразования в множество

# СИНТАКСИС СОЗДАНИЯ
# (1) через вызов функции set - set('elements')
data = set('hello')
print(data)
# (2) через фигурные скобки с указанием исключительно значений без указания ключей - {'value_1', 'value_2'}

set_example_2 = {1, 2, 3, 4, 5, 5, 5, 7, 9}
print(set_example_2)

# РАБОТА С МНОЖЕСТВОМ
# аналогично работе со списком, за исключением: (1) невозможно обратиться к элементу по индексу; (2) невозможно заменить элемент в множестве
# при этом возможно добавлять, удалять элементы множества

# МЕТОДЫ МНОЖЕСТВА
# (1) .add() - добавление элемента в множество;
set_example_3 = {1, 2, 3}
set_example_3.add(9)
print(set_example_3)

# (2) .update() - для добавления несокльких элементов в множество путем передачи списка функции update()
set_example_4 = {'a', 'b'}
set_example_4.update([2, 3, 4, False, 'g', 'a', True])
print(set_example_4)

# (3) .remove(elementValue) - для удаления указанного элемента из множества
set_example_4.remove('a')
print(set_example_4)

# (4) .pop() - для удаления первого элемента из множества
set_example_4.pop()
print(set_example_4)

# (5) .clear () - для полного очищения множества
set_example_4.clear()
print(set_example_4)

# СОЗДАНИЕ УНИКАЛЬНОГО СПИСКА ПУТЕМ СОЗДАНИЯ МНОЖЕСТВА ИЗ СПИСКА
nums = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
nums = set(nums)
print(nums)

# FROZENSET
# по сути - это объединение кортежа и множества, т.е. неизменяемое множество уникальных элементов
# синтаксис создания - функция frozenset()
frozenset_example_1 = frozenset(
    [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 3, 4, False, 'g', 'a', True])

print(frozenset_example_1)

# далее - пример неизменяемости frozenset множества
# frozenset_example_1.add(1) - AttributeError - object has no attribute 'add'
# аналогично невозможно удалять
